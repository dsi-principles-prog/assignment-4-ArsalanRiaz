library(janitor)
library(assertr)
library(lubridate)
ufc <- read_csv("ufcdata/data.csv") %>%
clean_names()
summary(ufc)
ufc %>%
verify(nrow(.) > 0)
ufc %>%
assert(not_na,everything())
ufcrefined <- na.omit(ufc)
View(ufcrefined)
as.data.frame(ufcrefined)
ufcrefined %>%
assert(in_set("Red","Blue", "Draw"), winner)
ufcrefined %>%
assert(in_set("TRUE","FALSE"),title_bout)
ufcrefined %>%
assert(within_bounds(0,10000), -date, - location, - winner, -r_fighter, -b_fighter, -referee,-title_bout, -weight_class, -b_stance, -r_stance)
ufcrefined %>%
assert(within_bounds(0,120), b_age)
ufcrefined %>%
assert(within_bounds(0,120), r_age)
unique(ufcrefined$weight_class)
library(ggplot2)
library(ggplot2)
unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weightclass)) +
geom_bar(stat = count)
library(ggplot2)
unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weightclass)) +
geom_bar(stat = "count")
unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count")
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T) +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1))
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T) +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1)) +
scale_y_continuous(breaks = seq(0,700,100)) +
theme_bw()
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T) +
scale_y_continuous(breaks = seq(0,700,100)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1))
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T, fill = "steelblue", color = black) +
scale_y_continuous(breaks = seq(0,700,100)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_text(stat = "Count",aes(label = ..count..),vjust = -0.4)
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T, fill = "steelblue", color = "black") +
scale_y_continuous(breaks = seq(0,700,100)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_text(stat = "Count",aes(label = ..count..),vjust = -0.4)
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T, fill = "steelblue", color = "black") +
scale_y_continuous(breaks = seq(0,800,100)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_text(stat = "Count",aes(label = ..count..),vjust = -0.4)
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T, fill = "steelblue", color = "black") +
scale_y_continuous(breaks = seq(0,800,100)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_text(stat = "Count",aes(label = ..count..),vjust = -0.2)
#library(ggplot2)
#unique(ufcrefined$weight_class)
ufcrefined %>%
ggplot(aes(weight_class)) +
geom_bar(stat = "count", na.rm = T, fill = "steelblue", color = "black") +
scale_y_continuous(breaks = seq(0,800,100)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_text(stat = "Count",aes(label = ..count..),vjust = -0.1)
summary(ufc)
selected <- c("b_avg_opp_total_str_att",
"b_avg_distance_landed",
"b_avg_head_landed",
"b_avg_head_att",
"b_avg_total_str_landed")
ggplot(stack(selected %in% ufcrefined),aes(x = ind, y = values)) +
geom_boxplot(na.rm = T)
ufcrefined %>%
ggplot(aes(x %in% selected)) +
geom_boxplot()
ggplot(aes(x = selected %in% ufcrefined )) +
geom_boxplot()
selected %in% ufcrefined
ggplot(stack( ufcrefined[,selected]),aes(x = ind, y = values)) +
geom_boxplot(na.rm = T)
ggplot(stack( ufcrefined[,selected]),aes(x = ind, y = values)) +
geom_boxplot(na.rm = T) +
theme_bw() +
theme(axis.text.x = element_text(angle = 50,hjust = 1,vjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
head(ufcrefined)
ufcrefined$winner_onehot_encode <- ifelse(ufcrefined$winner=='Red', 0, 1)
ufcrefined$winner_onehot_encode
select(ufcrefined$winner_onehot_encode)
select(ufcrefined$winner_onehot_encode)
ufcrefined %>%
select(winner_onehot_encode)
ufcrefined %>%
select(winner_onehot_encode,winner)
onehotencoding <- function(x) {
ufcrefined$winner_onehot_encode <- ifelse(ufcrefined$x =='Red', 0, 1)
}
onehotencoding(winner)
ufcrefined$winner_onehot_encode <- ifelse(ufcrefined$winner=='Red', 0, 1)
changingwinnertoonesandzeros <- function(df,x) {
ufcrefined %>%
mutate(winner_onehot_encode = ifelse(x == 'Red',0,1))
}
changingwinnertoonesandzeros(ufcrefined,winner)
changingwinnertoonesandzeros <- function(df,x) {
ufcrefined %>%
mutate(winner_onehot_encode = ifelse({{x}} == 'Red',0,1))
}
changingwinnertoonesandzeros(ufcrefined,winner)
changingwinnertoonesandzeros <- function(df,x) {
df %>%
mutate(winner_onehot_encode = ifelse({{x}} == 'Red',0,1))
}
changingwinnertoonesandzeros(ufcrefined,winner)
changingwinnertoonesandzeros(ufcrefined,winner)
changingwinnertoonesandzeros <- function(df,x) {
{{df}} %>%
mutate(winner_onehot_encode = ifelse({{x}} == 'Red',0,1))
}
changingwinnertoonesandzeros(ufcrefined,winner)
#Winsorization
summary(ufcrefined$b_avg_opp_total_str_att)
bench <- 114.25 + 1.5*IQR(ufcrefined$b_avg_opp_total_str_att)
bench
summary(ufcrefined$b_avg_opp_total_str_att)
ufcrefined[b_avg_opp_total_str_att > bench]
ufcrefined[,b_avg_opp_total_str_att > bench]
ufcrefined$b_avg_opp_total_str_att > bench
ufcrefined[ufcrefined$b_avg_opp_total_str_att > bench]
ufcrefined[ufcrefined$b_avg_opp_total_str_att > bench]
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench)
bench
ufcrefined %>%
filter(b_avg_opp_total_str_att > (114.25 + 1.5*IQR(b_avg_opp_total_str_att))) %>%
select(b_avg_opp_total_str_att)
ufcrefined %>%
filter(b_avg_opp_total_str_att > (114.25 + 1.5*IQR(b_avg_opp_total_str_att))) %>%
replace(b_avg_opp_total_str_att <- (114.25 + 1.5*IQR(b_avg_opp_total_str_att)) )
ufcrefined %>%
filter(b_avg_opp_total_str_att > (114.25 + 1.5*IQR(b_avg_opp_total_str_att))) %>%
replace(b_avg_opp_total_str_att,(114.25 + 1.5*IQR(b_avg_opp_total_str_att)) )
bench <- 114.25 + 1.5*IQR(ufcrefined$b_avg_opp_total_str_att)
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
select(b_avg_opp_total_str_att)
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att, values = bench ))
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att, values = bench )) %>% select(b_avg_opp_total_str_att)
summary(ufcrefined$b_avg_opp_total_str_att)
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench)
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
arrange(-b_avg_opp_total_str_att) %>%
select(b_avg_opp_total_str_att)
summary(ufcrefined$b_avg_opp_total_str_att)
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att, values = bench )) %>% select(b_avg_opp_total_str_att)
summary(ufcrefined$b_avg_opp_total_str_att)
ufcrefined %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att,list = b_avg_opp_total_str_att > bench , values = bench ))
arrange(-b_avg_opp_total_str_att) %>%
select(b_avg_opp_total_str_att)
ufcrefined %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att,list = b_avg_opp_total_str_att > bench , values = bench ))
select(b_avg_opp_total_str_att)
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att, values = bench )) %>% select(b_avg_opp_total_str_att)
ufcrefined
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att, values = bench )) %>% select(b_avg_opp_total_str_att)
ufcrefined %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att,list = b_avg_opp_total_str_att > bench , values = bench ))
select(r_fighter,b_avg_opp_total_str_att)
ufcrefined %>%
filter(b_avg_opp_total_str_att > bench) %>%
mutate(b_avg_opp_total_str_att = replace(x = b_avg_opp_total_str_att, values = bench )) %>% select(r_fighter,b_avg_opp_total_str_att)
#Winsorization
summary(ufcrefined$b_avg_opp_total_str_att)
ufcrefined %>%
mutate(b_avg_opp_total_str_att = ifelse(b_avg_opp_total_str_att>bench,bench,b_avg_opp_total_str_att))
%>% select(r_fighter,b_avg_opp_total_str_att)
ufcrefined %>%
mutate(b_avg_opp_total_str_att = ifelse(b_avg_opp_total_str_att>bench,bench,b_avg_opp_total_str_att)) %>%
select(r_fighter,b_avg_opp_total_str_att)
#Winsorization
summary(ufcrefined$b_avg_opp_total_str_att)
ufcrefined %>%
mutate(b_avg_opp_total_str_att_new = ifelse(b_avg_opp_total_str_att>bench,bench,b_avg_opp_total_str_att)) %>%
select(r_fighter,b_avg_opp_total_str_att)
ufcrefined %>%
mutate(b_avg_opp_total_str_att_new = ifelse(b_avg_opp_total_str_att>bench,bench,b_avg_opp_total_str_att)) %>%
select(r_fighter,b_avg_opp_total_str_att_new)
summary(ufcrefined$b_avg_opp_total_str_att_new)
summary(ufcrefined$b_avg_opp_total_str_att_new)
ufcrefined %>%
mutate(b_avg_opp_total_str_att_new = ifelse(b_avg_opp_total_str_att>bench,bench,b_avg_opp_total_str_att)) %>%
select(r_fighter,b_avg_opp_total_str_att_new)
#Winsorization
summary(ufcrefined$b_avg_opp_total_str_att_new)
ufcrefined %>%
mutate(b_avg_opp_total_str_att_new = ifelse(b_avg_opp_total_str_att > bench, bench, b_avg_opp_total_str_att)) %>%
select(r_fighter,b_avg_opp_total_str_att_new)
ufcrefined %>%
mutate(b_avg_opp_total_str_att_new = ifelse(b_avg_opp_total_str_att > bench, bench, b_avg_opp_total_str_att)) %>%
select(r_fighter,b_avg_opp_total_str_att_new) %>%
summary(b_avg_opp_total_str_att_new)
winsorizing <- function(df,x) {
bench <- 114.25 + 1.5*IQR(ufcrefined$x)
{{df}} %>%
mutate(b_avg_opp_total_str_att_new  = ifelse({{x}} > bench, bench, {{x}})) %>%
select(b_avg_opp_total_str_att_new) %>%
summary(b_avg_opp_total_str_att_new)
}
winsorizing(ufcrefined,b_avg_opp_total_str_att)
winsorizing <- function(df,x) {
bench <- 114.25 + 1.5*IQR(ufcrefined${{x}})
winsorizing <- function(df,x) {
bench <- 114.25 + 1.5*IQR({{df}}${{x}})
winsorizing <- function(df,x) {
bench <- (114.25 + 1.5*IQR({{df}}${{x}}))
winsorizing <- function(df,x) {
bench <- 114.25 + 1.5*IQR(ufcrefined$b_avg_opp_total_str_att)
{{df}} %>%
mutate(b_avg_opp_total_str_att_new  = ifelse({{x}} > bench, bench, {{x}})) %>%
select(b_avg_opp_total_str_att_new) %>%
summary(b_avg_opp_total_str_att_new)
}
winsorizing(ufcrefined,b_avg_opp_total_str_att)
winsorizing <- function(df,x) {
bench <- 114.25 + 1.5*IQR(df$x)
{{df}} %>%
mutate(b_avg_opp_total_str_att_new  = ifelse({{x}} > bench, bench, {{x}})) %>%
select(b_avg_opp_total_str_att_new) %>%
summary(b_avg_opp_total_str_att_new)
}
winsorizing(ufcrefined,b_avg_opp_total_str_att)
winsorizing <- function(df,x) {
bench <- 114.25 + 1.5*IQR({df}${x})
winsorizing <- function(df,x) {
bench <- 114.25 + 1.5*IQR({{df}}${{x}})
summary(ufcrefined,b_avg_opp_total_str_att)
summary(ufcrefined$b_avg_opp_total_str_att)
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_attack", "b_avg_clinch_attack_landed"))
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
ufcrefined %>%
calc_by_department(c("b_avg_clinch_attack", "b_avg_clinch_attack_landed"))
ufcrefined %>%
calc_by_department(c("b_avg_clinch_attack", "b_avg_clinch_attack_landed"))
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_attack", "b_avg_clinch_attack_landed"))
ufcrefined
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_attack_landed"))
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_attack_landed"))
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined
head(ufcrefined)
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_attack_landed"))
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_attack_landed"))
library(readr)
library(tidyverse)
library(dplyr)
library(janitor)
library(assertr)
library(lubridate)
ufc <- read_csv("ufcdata/data.csv") %>%
clean_names()
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_attack_landed"))
ufcrefined <- na.omit(ufc)
as.data.frame(ufcrefined)
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("b_avg_clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_attack_landed"))
summary(ufcrefined$b_avg_clinch_attack_landed)
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_landed"))
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("clinch"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_landed"))
scale2 <-  function(x, na.rm = TRUE) (x - mean(x, na.rm = na.rm))/ sd(x, na.rm = na.rm)
calc_by_department <- function(df, vars ) {
df %>%
group_by(weight_class) %>%
mutate_at(vars, list(std_weightclass = scale2)) %>%
ungroup() %>%
select(weight_class, contains ("std_weightclass"), everything()) %>%
arrange(weight_class)
}
ufcrefined %>%
calc_by_department(c("b_avg_clinch_att", "b_avg_clinch_landed"))
wday(ufcrefined$date)
datepart <- function(datee){
ufcrefined %>%
mutate(Year = year({{x}}),
Month = month({{x}}),
Day = wday({{x}}))
}
datepart <- function(datee){
ufcrefined %>%
mutate(Year = year({{x}}),
Month = month({{x}}),
Day = wday({{x}})) %>%
select(Year,Month,Day,everything())
}
ufcrefined %>%
datepart(date)
datepart <- function(x){
ufcrefined %>%
mutate(Year = year({{x}}),
Month = month({{x}}),
Day = wday({{x}})) %>%
select(Year,Month,Day,everything())
}
ufcrefined %>%
datepart(date)
ufcrefined %>%
datepart(date)
datepart(ufcrefined,date)
ufcrefined %>%
datepart(ufcrefined,"date")
ufcrefined %>%
datepart(ufcrefined,date)
datepart(ufcrefined,date)
year(ufcrefined$date)
View(datepart)
datepart <- function(df,x){
{{df}} %>%
mutate(Year = year({{x}}),
Month = month({{x}}),
Day = wday({{x}})) %>%
select(Year,Month,Day,everything())
}
year(ufcrefined$date)
datepart(ufcrefined,date)
View(ufcrefined)
ufcrefined <- datepart(ufcrefined,date)
datepart <- function(df,x){
{{df}} %>%
mutate(Year = year({{x}}),
Month = month({{x}}),
Day = wday({{x}})) %>%
select(Year,Month,Day,everything())
}
ufcrefined <- datepart(ufcrefined,date)
ufcrefined
changingwinnertoonesandzeros <- function(df,x) {
{{df}} %>%
mutate(winner_onehot_encode = ifelse({{x}} == 'Red',0,1))
}
ufcrefined <- changingwinnertoonesandzeros(ufcrefined,winner)
View(ufcrefined)
changingwinnertoonesandzeros <- function(df,x) {
{{df}} %>%
mutate(winner_onehot_encode = ifelse({{x}} == 'Red',0,1))
}
ufcrefined <- changingwinnertoonesandzeros(ufcrefined,winner)
{{df}} %>%
mutate(winner_onehot_encode = ifelse({{x}} == 'Red',0,1)) %>%
select(winner_onehot_encode, everything())
ufcrefined <- changingwinnertoonesandzeros(ufcrefined,winner)
changingwinnertoonesandzeros <- function(df,x) {
